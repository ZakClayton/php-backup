{"name":"Php-backup","tagline":"Simple package for backing up databases, files and directories to Dropbox and Ftp.","body":"# PHP Backup\r\n\r\nA simple package for backing up mysql databases, files and directories to Dropbox and FTP.\r\n\r\nThis package makes use of\r\n\r\n- [backup-manager/backup-manager](https://github.com/backup-manager/backup-manager)\r\n- [thephpleague/flysystem](https://github.com/thephpleague/flysystem)\r\n- [ZipArchive](http://php.net/manual/en/class.ziparchive.php)\r\n- [briannesbitt/Carbon](https://github.com/briannesbitt/Carbon)\r\n\r\n## Usage examples\r\n\r\nYou can watch this [video tutorial](https://ssdtutorials.com/courses/dropbox-backup) or read below.\r\n\r\n\r\n### Backing up to Dropbox\r\n\r\n```\r\nrequire \"../vendor/autoload.php\";\r\n\r\nuse SSD\\DotEnv\\DotEnv;\r\n\r\nuse SSD\\Backup\\Backup;\r\nuse SSD\\Backup\\Remotes\\Dropbox;\r\nuse SSD\\Backup\\Jobs\\Directory;\r\nuse SSD\\Backup\\Jobs\\File;\r\nuse SSD\\Backup\\Jobs\\MySQLDatabase;\r\n\r\n$dotenv = new DotEnv([\r\n    __DIR__ . '/.env'\r\n]);\r\n$dotenv->load();\r\n$dotenv->required([\r\n    'DROPBOX_SECRET',\r\n    'DROPBOX_OAUTH',\r\n    'REMOTE_DIR_NAME',\r\n    'DB_HOST',\r\n    'DB_PORT',\r\n    'DB_NAME',\r\n    'DB_USER',\r\n    'DB_PASS'\r\n]);\r\n\r\n// working directory\r\n$workingDirectory = __DIR__ . '/tmp';\r\n\r\ntry {\r\n\r\n    $remote = new Dropbox(\r\n        getenv('DROPBOX_OAUTH'),\r\n        getenv('DROPBOX_SECRET')\r\n    );\r\n\r\n    $backup = new Backup(\r\n        $remote,\r\n        $workingDirectory\r\n    );\r\n\r\n    // directory to which backup should be saved on the remote server\r\n    $backup->setRemoteDirectory(getenv('REMOTE_DIR_NAME'));\r\n\r\n    // keep only 7 backups then overwrite the oldest one\r\n    $backup->setNumberOfBackups(7);\r\n\r\n    // add MySQL database to the backup\r\n    $backup->addJob(new Job(\r\n        new MySQLDatabase([\r\n            'host' => getenv('DB_HOST'),\r\n            'name' => getenv('DB_NAME'),\r\n            'user' => getenv('DB_USER'),\r\n            'password' => getenv('DB_PASS')\r\n        ]),\r\n        'database'\r\n    ));\r\n\r\n    // add single file to the backup\r\n    $backup->addJob(new Job(\r\n        new File(\r\n            __DIR__ . '/files/text.txt',\r\n            __DIR__\r\n        ),\r\n        'files'\r\n    ));\r\n\r\n    // add the 'files' directory to the backup\r\n    // but exclude the 'css' directory within\r\n    $backup->addJob(new Job(\r\n        new Directory(\r\n            __DIR__ . '/files',\r\n            __DIR__,\r\n            [\r\n                'files/css'\r\n            ]\r\n        ),\r\n        'files'\r\n    ));\r\n\r\n    // run backup\r\n    $backup->run();\r\n\r\n} catch (Exception $e) {\r\n\r\n    $file = $workingDirectory . DIRECTORY_SEPARATOR . 'error_log';\r\n\r\n    file_put_contents($file, $e->getMessage() . PHP_EOL, FILE_APPEND | LOCK_EX);\r\n\r\n}\r\n```\r\n\r\n### Backing up to Ftp\r\n\r\n```\r\nrequire \"../vendor/autoload.php\";\r\n\r\nuse SSD\\DotEnv\\DotEnv;\r\n\r\nuse SSD\\Backup\\Backup;\r\nuse SSD\\Backup\\Remotes\\Ftp;\r\nuse SSD\\Backup\\Jobs\\Directory;\r\nuse SSD\\Backup\\Jobs\\File;\r\nuse SSD\\Backup\\Jobs\\MySQLDatabase;\r\n\r\n$dotenv = new DotEnv([\r\n    __DIR__ . '/.env'\r\n]);\r\n$dotenv->load();\r\n$dotenv->required([\r\n    'FTP_HOST',\r\n    'FTP_USER',\r\n    'FTP_PASS',\r\n    'REMOTE_DIR_NAME',\r\n    'DB_HOST',\r\n    'DB_PORT',\r\n    'DB_NAME',\r\n    'DB_USER',\r\n    'DB_PASS'\r\n]);\r\n\r\n// working directory\r\n$workingDirectory = __DIR__ . '/tmp';\r\n\r\ntry {\r\n\r\n    $remote = new Ftp(\r\n        getenv('FTP_HOST'),\r\n        getenv('FTP_USER'),\r\n        getenv('FTP_PASS')\r\n    );\r\n\r\n    $backup = new Backup(\r\n        $remote,\r\n        $workingDirectory\r\n    );\r\n\r\n    // directory to which backup should be saved on the remote server\r\n    $backup->setRemoteDirectory(getenv('REMOTE_DIR_NAME'));\r\n\r\n    // keep only 7 backups then overwrite the oldest one\r\n    $backup->setNumberOfBackups(7);\r\n\r\n    // add MySQL database to the backup\r\n    $backup->addJob(new Job(\r\n        new MySQLDatabase([\r\n            'host' => getenv('DB_HOST'),\r\n            'name' => getenv('DB_NAME'),\r\n            'user' => getenv('DB_USER'),\r\n            'password' => getenv('DB_PASS')\r\n        ]),\r\n        'database'\r\n    ));\r\n\r\n    // add single file to the backup\r\n    $backup->addJob(new Job(\r\n        new File(\r\n            __DIR__ . '/files/text.txt',\r\n            __DIR__\r\n        ),\r\n        'files'\r\n    ));\r\n\r\n    // add the entire directory to the backup\r\n    $backup->addJob(new Job(\r\n        new Directory(\r\n            __DIR__ . '/files/css',\r\n            __DIR__ . '/files'\r\n        ),\r\n        'files'\r\n    ));\r\n\r\n    // run backup\r\n    $backup->run();\r\n\r\n} catch (Exception $e) {\r\n\r\n    $file = $workingDirectory . DIRECTORY_SEPARATOR . 'error_log';\r\n\r\n    file_put_contents($file, $e->getMessage() . PHP_EOL, FILE_APPEND | LOCK_EX);\r\n\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}